{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SoftwareDev\\\\Desktop\\\\github-repos\\\\kubic-iq\\\\src\\\\contexts\\\\AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    // Check for existing session\n    const checkAuth = async () => {\n      try {\n        const response = await fetch('/api/auth/session');\n        if (response.ok) {\n          const userData = await response.json();\n          setUser(userData);\n        }\n      } catch (err) {\n        console.error('Auth check failed:', err);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    checkAuth();\n  }, []);\n  const login = async (email, password) => {\n    setError(null);\n    setIsLoading(true);\n    try {\n      const response = await fetch('/api/auth/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email,\n          password\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Invalid credentials');\n      }\n      const userData = await response.json();\n      setUser(userData);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Login failed');\n      throw err;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const logout = async () => {\n    try {\n      await fetch('/api/auth/logout', {\n        method: 'POST'\n      });\n    } catch (err) {\n      console.error('Logout failed:', err);\n    } finally {\n      setUser(null);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      isLoading,\n      error,\n      login,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"caAZa649wyY9nHJT6au393y4yCs=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","undefined","AuthProvider","children","_s","user","setUser","isLoading","setIsLoading","error","setError","checkAuth","response","fetch","ok","userData","json","err","console","login","email","password","method","headers","body","JSON","stringify","Error","message","logout","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","$RefreshReg$"],"sources":["C:/Users/SoftwareDev/Desktop/github-repos/kubic-iq/src/contexts/AuthContext.tsx"],"sourcesContent":["import { createContext, useContext, useState, useEffect, ReactNode } from 'react';\r\n\r\ninterface User {\r\n  id: string;\r\n  name: string;\r\n  email: string;\r\n  masteryScore: number;\r\n}\r\n\r\ninterface AuthContextType {\r\n  user: User | null;\r\n  isLoading: boolean;\r\n  error: string | null;\r\n  login: (email: string, password: string) => Promise<void>;\r\n  logout: () => void;\r\n}\r\n\r\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\r\n\r\ninterface AuthProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const AuthProvider = ({ children }: AuthProviderProps) => {\r\n  const [user, setUser] = useState<User | null>(null);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  useEffect(() => {\r\n    // Check for existing session\r\n    const checkAuth = async () => {\r\n      try {\r\n        const response = await fetch('/api/auth/session');\r\n        if (response.ok) {\r\n          const userData = await response.json();\r\n          setUser(userData);\r\n        }\r\n      } catch (err) {\r\n        console.error('Auth check failed:', err);\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    checkAuth();\r\n  }, []);\r\n\r\n  const login = async (email: string, password: string) => {\r\n    setError(null);\r\n    setIsLoading(true);\r\n\r\n    try {\r\n      const response = await fetch('/api/auth/login', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ email, password })\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Invalid credentials');\r\n      }\r\n\r\n      const userData = await response.json();\r\n      setUser(userData);\r\n    } catch (err) {\r\n      setError(err instanceof Error ? err.message : 'Login failed');\r\n      throw err;\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const logout = async () => {\r\n    try {\r\n      await fetch('/api/auth/logout', { method: 'POST' });\r\n    } catch (err) {\r\n      console.error('Logout failed:', err);\r\n    } finally {\r\n      setUser(null);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ user, isLoading, error, login, logout }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (context === undefined) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}